package _07object클래스;

public class _StringBuffer {
	
	
	/*스트링 버퍼 클래스의 특딩은 한번 만들어두면 문자열 추가를 할 수 있다
	 * 그냥 스트링은 변경하면 객체를 새로 생성하지만 스트링 버퍼는 기존에 있는거에 추가 할 수 있다
	 * String처럼 문자형 배열을 내부적으로 가지고 잇다
	 * 인스턴스를 생성할떄 버퍼(배열)의 크기를 충분히 지정해주는 것이 좋다.
	 * 버퍼가 작으면 성능 저하고 작업중 더 큰 배열의 생성이 필요하다
	 * String과 달리 equals를 오버라이딩 하지 않아 사용이 불가능하다
	 * 스트링 버퍼보다는 빌더가 빠르다
	 * ------------------------------------------------
	 * 생성자
	 * StringBuffer()
	 * StringBuffer(int length)
	 * StringBuffer(String)
	 * ------------------------------------------------
	 * StringBuffer append(): 매개변수 boolean~int, char, Object,String
	 * 
	 * ------------------------------------------------
	 * inf capacity()
	 * 버퍼의 크기 반환(비어있는것 포함)
	 * ------------------------------------------------
	 * char charAt(int)
	 * ------------------------------------------------
	 * StringBuffer delete(int start, int end)
	 * 시작과 끝의 인덱스 사이의 문자열 삭제
	 * ------------------------------------------------
	 * StringBuffer delete(int)
	 * 해당 문자열 삭제
	 * ------------------------------------------------
	 * StringBuffer insert(int pos,):매개변수 boolean, ~~~~~
	 * 지정된 위치(pos)에 해당매개변수를 추가
	 * 
	 * ------------------------------------------------
	 * int length()
	 * 버퍼의 크기가 아닌 문자열의 크기 반환
	 * ------------------------------------------------
	 * StringBuffer replace(int start, int esd, String)
	 * 명 번째 인덱스부터 몇 번쨰 인덱스까지 해당 문자열로 교체
	 * ------------------------------------------------
	 * reverse()
	 * 문자열의 순서를 거꾸로ㅓ
	 * ------------------------------------------------
	 * void setCharAt(int index, char ch)
	 * 지정된 위치의 문자를 매개변수로 변경
	 * ------------------------------------------------
	 * setLength(int newLEngth)
	 * 지정된 크기로 문자열의 길이 변경 크기를 늘리는 경우 나머지 빈 공간은 null?
	 * ------------------------------------------------
	 * ------------------------------------------------
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 */
	
	

}
